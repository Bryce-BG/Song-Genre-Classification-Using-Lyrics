from sklearn.svm import LinearSVC
import numpy as np
#from sklearn.neighbors.nearest_centroid import NearestCentroid
from sklearn.cluster import KMeans
import warnings
warnings.simplefilter("ignore", DeprecationWarning)

"""
A script that calls the sklearn's implementation of the Nearest Neigbor Classifier algorithm on our dataset to train for our dataset. 
Then we use these weights to make predictions on our test dataset and output the accuracy of the algorithm on our dataset.
Author(s): Bryce Bodley-Gomes, Theodore Proulx
ended read at: 3:23 
training ended at 3:27
"""


def main():
    y_list = []  # a list of the genres for each song
    x_list = []  # a list of lists for the feature weights (the word counts for each song in a sparse list format)
    #count = 0
    file = open("ourTrainDataset.txt", 'r')
    for line in file:
        if line.startswith('%') or line.startswith('#'):
            pass
        else:
            # if count>20:
            #     break
            # count +=1
            wordVal = line.split(',')
            y_list.append(wordVal[2])

            wordVal = wordVal[3:]
            weightx = [0] * 5000
            for x in wordVal:
                weightx[int(x.split(':')[0]) - 1] = int(x.split(':')[1].rstrip())
            x_list.append(weightx)

    print "finished reading"

            # convert lists into numpy arrays
    X = np.array(x_list)
    #Y = np.array(y_list)

    classifier  = KMeans(n_clusters=13)

    #classifier.n_neighbors = 13
    #classifier.metric = 'euclidean'

    classifier.fit(X)  # run firt function on the dataset


    print "Finished Training"

    #print classifier.cluster_centers_[12]

    elecCluster = classifier.predict(makevec("1:2,2:2,3:8,4:1,5:2,6:5,8:2,9:3,10:1,12:2,13:2,14:3,15:4,16:1,18:1,20:1,24:2,25:1,26:1,29:1,31:6,33:6,34:2,36:13,39:1,51:1,52:1,57:1,69:1,71:1,83:1,99:1,120:3,121:4,141:5,219:5,224:1,227:1,267:1,295:18,357:1,517:4,569:1,619:1,768:2,845:3,908:1,912:1,1026:3,1174:5,1216:1,1323:1,1537:3,2923:1,4727:1"))
    popCluster = classifier.predict(makevec("1:11,2:18,4:4,5:8,6:13,7:2,8:2,9:3,10:6,11:3,12:3,13:3,15:4,17:2,18:1,22:2,23:1,25:1,26:1,30:1,33:1,34:3,35:1,36:3,37:2,41:1,43:5,44:1,45:8,51:9,52:1,53:1,54:3,56:1,58:1,59:1,60:3,64:1,67:2,68:3,70:1,71:1,72:7,75:1,80:2,84:2,85:1,87:1,88:2,95:1,105:2,110:1,115:2,119:2,122:9,125:1,127:1,133:1,134:1,138:1,143:1,147:1,153:1,155:1,157:1,159:1,166:2,182:7,185:1,187:1,197:1,201:1,211:1,225:11,239:1,248:1,252:1,258:1,268:1,274:1,293:1,310:1,313:1,320:1,329:4,348:1,352:4,393:1,406:8,418:1,422:1,466:1,468:1,495:1,497:4,500:1,557:1,563:1,575:1,617:1,623:1,640:6,663:2,700:6,783:1,879:1,922:1,947:10,963:1,980:8,1077:1,1355:4,1433:1,1462:1,1545:1,1577:1,1859:1,1941:1,2060:1,2182:1,2292:5,2621:1,2743:4,3398:1,3926:1,3990:1"))
    jazCluster = classifier.predict(makevec("1:7,2:11,3:3,4:3,5:6,6:2,7:1,9:2,10:2,11:3,12:1,13:3,14:6,15:1,17:4,20:1,22:1,24:2,25:2,26:1,28:1,30:1,31:2,32:4,34:1,35:1,37:1,40:1,48:3,52:1,56:1,58:1,66:1,68:1,69:1,70:1,71:2,72:2,74:1,75:1,81:1,83:1,137:1,141:1,142:1,153:1,155:1,159:2,165:1,194:1,206:1,245:1,248:1,258:1,270:1,274:1,300:3,338:4,355:1,369:1,389:1,464:1,489:2,513:1,564:1,571:1,636:2,717:1,947:1,995:1,1095:1,1150:1,1192:1,1257:2,1307:1,1354:1,1594:1,2018:1,2124:3,2279:1,2493:1,2740:1,3453:1"))
    rapCluster = classifier.predict(makevec("1:33,2:92,3:29,4:12,5:40,6:10,7:6,8:14,9:8,10:9,11:6,12:11,13:10,14:5,15:5,16:7,17:2,18:9,19:4,20:8,21:4,22:3,23:2,24:3,25:11,26:1,27:1,28:2,29:7,30:2,31:3,32:6,33:10,35:1,36:1,37:1,40:5,41:3,43:1,44:4,45:4,48:24,49:7,50:6,52:5,53:1,54:3,55:2,56:3,57:2,58:10,59:1,60:1,63:1,64:1,65:3,66:1,68:2,69:3,72:4,73:6,75:1,76:2,78:1,79:2,82:1,83:1,84:3,86:4,88:4,91:2,94:2,98:1,100:1,101:3,103:1,105:10,106:1,109:1,111:9,116:1,119:1,121:2,122:6,124:2,131:2,141:3,143:2,153:1,154:1,159:4,162:1,168:1,169:1,174:2,176:2,185:2,193:4,197:1,201:1,205:1,212:2,215:1,227:2,229:1,230:2,235:3,241:3,242:1,251:1,257:3,258:1,260:1,263:1,268:1,269:5,275:2,277:3,280:1,284:1,293:3,295:4,304:1,305:1,307:1,324:3,328:4,330:1,332:1,335:2,336:1,338:1,349:1,350:2,352:3,374:1,378:2,393:2,394:1,404:3,409:1,413:1,433:2,439:3,444:4,452:1,468:1,474:1,475:1,486:1,487:1,508:1,509:1,517:1,521:1,536:2,548:1,557:1,565:1,568:1,585:1,596:1,620:1,624:1,654:1,661:1,677:1,688:1,704:1,721:2,724:3,754:2,763:1,783:4,794:1,806:1,812:1,813:2,825:2,851:1,874:1,901:1,904:1,935:3,938:1,947:2,1002:11,1019:1,1051:1,1065:1,1093:2,1106:1,1118:2,1197:2,1203:2,1204:1,1205:1,1276:1,1292:1,1308:2,1325:1,1385:1,1386:1,1388:1,1394:1,1398:1,1408:2,1450:1,1481:2,1491:2,1497:3,1577:1,1597:1,1714:1,1718:1,1738:1,1739:1,1756:1,1761:2,1831:2,1888:1,1963:1,2016:2,2033:1,2047:1,2125:1,2127:1,2209:2,2357:1,2364:1,2468:1,2672:1,2770:2,2773:1,2853:1,2885:1,2966:1,3125:1,3166:1,3281:1,3338:1,3340:1,3343:1,3589:1,3593:1,3669:2,3698:1,3893:1,3913:2,3936:1,4229:1,4415:2,4781:1,4840:1,4977:1"))
    countryCluster = classifier.predict(makevec("1:12,2:16,3:17,4:9,5:19,6:1,7:11,9:1,10:6,11:15,12:1,13:3,14:2,15:3,16:1,17:2,19:7,20:1,21:4,22:2,25:2,26:1,27:2,28:1,30:1,34:1,35:4,36:3,39:3,41:1,45:4,46:5,48:2,49:1,51:2,53:1,54:4,55:1,57:1,58:3,67:2,68:2,72:4,73:1,78:5,86:1,87:9,88:3,89:1,91:3,93:1,110:1,113:1,120:1,124:2,125:2,129:1,132:2,133:1,135:2,138:1,139:1,143:3,144:5,148:3,149:3,154:1,155:1,157:1,159:1,166:1,168:1,172:1,176:2,182:1,185:1,202:1,221:1,224:2,258:3,276:1,278:2,280:2,290:2,291:4,294:2,304:1,310:1,323:3,324:1,339:1,344:1,347:2,360:2,369:1,374:1,384:1,393:1,420:1,422:1,426:4,486:1,500:1,506:2,509:1,518:2,529:1,540:1,548:1,599:3,624:1,635:1,639:1,775:2,824:1,845:1,1015:1,1117:1,1185:2,1280:1,1324:1,1330:1,1395:2,1614:2,1773:1,1803:1,1813:1,1983:1,2292:1,3003:1,3213:1,4124:1"))
    vocalCluster = classifier.predict(makevec("1:6,2:14,3:1,4:1,5:7,6:4,7:3,8:1,10:4,11:4,12:1,13:1,17:1,19:1,21:1,24:1,26:1,28:1,31:2,32:1,33:1,34:2,35:2,36:2,37:1,39:1,41:1,43:1,45:2,46:1,47:14,48:1,49:4,51:2,53:1,54:1,55:1,56:1,58:1,60:1,67:1,71:1,78:2,79:2,85:2,86:1,103:1,108:1,120:1,121:1,126:1,134:1,145:1,148:3,151:1,153:1,155:1,170:3,182:1,191:1,201:1,215:1,220:1,222:2,225:2,231:1,242:1,277:1,327:1,339:1,345:1,358:1,376:1,409:1,423:1,426:1,435:1,481:1,484:1,489:1,495:1,506:1,544:1,568:1,602:1,611:1,681:1,693:1,718:1,749:1,790:2,827:1,842:1,905:1,953:1,1021:1,1109:1,1116:1,1138:1,1142:1,1228:1,1230:1,1400:1,1474:1,1496:1,1578:1,1603:1,2100:1,2163:1,2243:2,2301:1,2485:1,2924:1,3274:1,3483:1"))
    internationalCluster = classifier.predict(makevec("1:1,6:1,47:2,102:1,112:1,128:1,151:2,177:1,288:1,296:1,298:2,309:2,412:1,614:1,696:6,857:2,1110:1,1226:3,1334:1,1544:2,1701:4,1726:1,1734:1,1782:4,2269:2,2325:1,2464:1,2916:1,3173:1,3363:1,3701:1,4149:1,4366:1"))
    rnBCluster = classifier.predict(makevec("1:9,2:2,3:24,4:4,5:2,6:1,7:4,8:11,9:7,10:1,11:2,12:2,16:7,18:6,19:1,20:1,24:1,26:1,27:1,28:1,29:2,32:1,33:2,34:4,35:2,36:3,37:1,39:1,40:5,41:1,45:1,46:13,52:26,56:2,58:1,61:4,62:2,63:3,68:1,73:19,76:1,95:2,96:17,98:1,123:1,129:4,130:1,136:20,141:1,152:1,155:1,170:1,180:1,204:24,213:1,227:5,241:1,248:1,258:2,267:1,277:2,516:1,730:4,763:1,838:1,875:1,955:1,1108:1,1445:5,1471:1,1656:1,1795:1,3076:1,3891:1"))
    latinCluster = classifier.predict(makevec("6:1,7:1,24:5,38:3,47:2,77:13,102:5,104:3,112:16,114:1,128:2,158:2,170:9,171:2,174:8,179:1,208:12,209:3,236:1,246:3,263:8,314:10,388:1,441:1,498:6,507:2,530:1,533:6,558:1,570:1,580:10,657:3,715:2,737:2,800:3,964:4,983:1,1033:1,1181:3,1191:3,1194:4,1202:1,1320:3,1467:3,1581:1,1589:1,1805:1,2218:4,2323:1,2780:1,3022:1,3183:1,3475:3,3586:3,3628:3,3720:1,3875:1,3992:5,4074:1,4365:1,4475:3"))
    folkCluster = classifier.predict(makevec("1:5,2:2,3:3,4:2,5:1,6:4,7:1,10:2,11:2,12:1,14:2,15:1,17:1,18:2,19:1,21:2,23:1,24:1,25:2,27:1,31:1,35:2,36:1,43:2,51:1,58:3,63:2,67:2,81:1,88:1,101:1,108:1,110:1,111:2,133:1,134:2,136:1,148:1,166:1,190:1,195:1,205:1,237:1,239:1,279:1,283:1,287:1,294:2,301:1,336:1,349:1,370:1,372:1,415:1,420:1,517:1,562:1,571:1,654:1,678:1,770:1,910:1,1136:1,1149:1,1425:5,2137:1,2794:1"))
    bluesCluster =  classifier.predict(makevec("1:15, 2:2, 4:11, 5:4, 6:5, 7:2, 8:1, 10:4, 11:3, 12:1, 15:1, 16:2, 18:1, 23:1, 25:1, 26:2, 28:1, 29:2, 31:5, 33:2, 34:7, 37:4, 44:2, 49:1, 56:3, 59:1, 65:1, 66:1, 68:4, 69:1, 71:2, 75:3, 78:3, 79:1, 80:1, 84:2, 92:1, 94:2, 107:1, 109:3, 115:2, 116:1, 118:2, 120:16, 121:1, 141:1, 155:3, 187:1, 188:1, 193:2, 200:2, 215:1, 219:2, 242:2, 258:4, 265:2, 270:2, 277:1, 285:4, 313:1, 326:1, 332:2, 340:1, 409:1, 444:2, 467:2, 506:1, 539:1, 552:1, 747:1, 797:2, 840:1, 848:1, 1157:2, 1209:1, 1283:2, 1341:3, 1491:1, 1739:4, 1959:1, 2133:1, 2204:2, 2830:3"))
    newAgeCluster = classifier.predict(makevec("1:15, 2:8, 3:3, 4:4, 5:9, 6:7, 7:11, 8:2, 9:2, 10:4, 11:2, 12:1, 13:8, 14:4, 15:1, 16:1, 17:2, 18:2, 20:2, 21:1, 23:4, 26:2, 27:2, 28:1, 29:1, 31:1, 37:1, 41:1, 43:2, 44:2, 48:2, 52:1, 57:4, 58:1, 60:1, 63:1, 66:1, 68:2, 75:1, 78:1, 81:5, 83:1, 86:3, 89:1, 99:2, 109:1, 122:1, 123:1, 124:1, 134:3, 136:1, 150:2, 154:1, 159:1, 162:1, 193:1, 213:1, 222:6, 223:1, 229:4, 233:1, 265:2, 292:1, 337:1, 343:8, 350:2, 351:2, 512:1, 515:1, 531:4, 563:1, 573:4, 575:1, 611:1, 612:2, 629:2, 669:4, 681:1, 690:1, 717:4, 788:4, 936:1, 949:2, 1099:1, 1223:1, 1456:1, 1475:1, 1496:2, 1635:1, 1809:1, 2726:1, 3140:2, 3210:2, 4443:2"))
    reggaeCluster =classifier.predict(makevec("1:5, 2:9, 3:23, 4:12, 5:6, 6:7, 7:6, 8:4, 9:7, 10:3, 11:1, 13:3, 14:6, 15:3, 16:8, 17:3, 18:3, 19:8, 22:2, 23:1, 24:5, 26:1, 28:3, 29:1, 31:4, 33:1, 37:1, 40:4, 43:1, 45:9, 49:6, 50:2, 51:3, 52:2, 56:2, 57:1, 62:5, 63:3, 64:3, 66:2, 67:3, 74:1, 86:1, 92:3, 93:1, 95:2, 96:6, 98:1, 99:1, 100:3, 103:1, 109:3, 113:7, 118:4, 119:1, 121:1, 123:1, 132:1, 135:3, 139:1, 145:1, 154:1, 157:1, 162:3, 165:1, 191:1, 210:1, 215:3, 222:2, 223:1, 231:1, 233:1, 240:1, 250:1, 261:3, 275:1, 279:1, 284:1, 297:1, 308:1, 311:1, 318:1, 326:1, 332:1, 340:1, 343:1, 363:3, 372:1, 377:2, 395:1, 420:2, 423:1, 431:1, 433:2, 465:1, 467:1, 506:1, 575:1, 588:1, 611:1, 651:1, 655:1, 682:1, 701:1, 806:1, 811:3, 837:1, 950:1, 975:2, 1018:1, 1045:1, 1235:1, 1255:1, 1578:1, 1631:1, 1907:1, 1983:1, 2004:1, 2266:1, 2570:1, 2571:1, 2731:1, 2769:1, 3109:1, 3396:1, 3710:1, 4135:1"))

    clusterDictionary = {}

    clusterDictionary["Reggae"] = str(reggaeCluster)

    clusterDictionary["Pop_Rock"] =str(popCluster)
    clusterDictionary["Country"] = str(countryCluster)
    clusterDictionary["Jazz"] = str(jazCluster)
    clusterDictionary["Vocal"] =str(vocalCluster)
    clusterDictionary["New Age"] = str(newAgeCluster)
    clusterDictionary["Latin"] = str(latinCluster)
    clusterDictionary["Rap"] = str(rapCluster)
    clusterDictionary["RnB"] = str(rnBCluster)
    clusterDictionary["International"] = str(internationalCluster)
    clusterDictionary["Blues"] = str(bluesCluster)
    clusterDictionary["Electronic"] = str(elecCluster)
    clusterDictionary["Folk"] = str(folkCluster)

    print "electric: " + str(elecCluster)
    print "pop " + str(popCluster)
    print "jazz " + str(jazCluster)
    print "rap " + str(rapCluster)
    print "country " + str(countryCluster)
    print "vocal " + str(vocalCluster)
    print "international " + str(internationalCluster)
    print "RnB " + str(rnBCluster)


    #make predictions and get the accuracy
    file = open("ourTestDataset.txt", 'r')  # open the testfile
    correct_count = 0.0
    total = 0.0
    for line in file:  # loop over the lines and preform prediciton and see if the prediction is correct.
        if clusterDictionary[line.split(',')[2]] == str(classifier.predict(makevec(line))):
            correct_count += 1.0
        total += 1

    print "accuracy correct/total", float(correct_count) / float(total)


def makevec(line):
    # take in a bag of words representation of lyrics (and expand it to the sparse form for the algorithm
    wordVal = line.split(',')
    wordVal = wordVal[3:]
    weightx = [0] * 5000
    for x in wordVal:
        weightx[int(x.split(':')[0]) - 1] = int(x.split(':')[1].rstrip())
    return weightx


if __name__ == '__main__':
    main()